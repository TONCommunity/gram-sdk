stages:
  - build
  # - test
  - package
  - deploy

build:
  stage: build
  image: node:alpine
  script:
    - apk add --no-cache git
    - DEPLOY_ENV=production yarn setup
    - yarn prebuild
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - node_modules/
      - src-cordova/node_modules/
  artifacts:
    untracked: true
    paths:
      - src-cordova/www/

# test: 
#   stage: test
#   image: node:alpine
#   dependencies:
#     - build
#   cache:
#     key: ${CI_JOB_NAME}
#     paths:
#       - node_modules/
#   before_script:
#     - apk add curl
#     - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | /bin/sh
#     - export NVM_DIR="$HOME/.nvm"
#     - [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh",
#     - nvm install 8 && nvm use 8
#   script: 
#     - yarn
#     - nvm use 8 && cd functions && yarn
#   artifacts:
#     untracked: true
#     paths:
#       - test_output

package-android:
  image: beevelop/cordova:v9.0.0
  stage: package
  dependencies:
    - build
  only:
    - tags
  script:
    - chmod +x src-cordova/update-version.sh
    - "[[ -z $CI_COMMIT_TAG ]] || ./src-cordova/update-version.sh $CI_COMMIT_TAG"
    - mkdir $ANDROID_HOME/licenses
    - echo '<result from cat>' > $ANDROID_HOME/licenses/android-sdk-license
    - yes | $ANDROID_HOME/tools/bin/sdkmanager "platforms;android-28" && yes | $ANDROID_HOME/tools/bin/sdkmanager "build-tools;28.0.3"
    - cd src-cordova && cordova build android --release
    - cp platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk app-release-unsigned.apk
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - src-cordova/node_modules/
      - src-cordova/platforms/
      - src-cordova/plugins/
  artifacts:
    paths:
      - src-cordova/app-release-unsigned.apk

deploy-android:
  image: tygrinn/android-deploy:latest
  stage: deploy
  dependencies:
    - package-android
  only:
    - tags
  script:
    - cd src-cordova && jarsigner -sigalg SHA1withRSA -digestalg SHA1 -keystore ./fastlane/gram-net.keystore app-release-unsigned.apk gram-net -storepass $KEYSTORE_PASS
    - zipalign -v 4 app-release-unsigned.apk app-release.apk
    - gem install fastlane:2.141.0 --no-ri --no-rdoc 
    - gem install bundler:1.17.2 --no-ri --no-rdoc 
    - fastlane supply --apk app-release.apk --track alpha --release_status draft --package_name network.gram.navigator 
  artifacts:
    paths:
      - src-cordova/app-release.apk

# deploy-functions_staging:
#   image: node:8-alpine
#   stage: deploy
#   cache:
#     key: ${CI_JOB_NAME}
#     paths:
#       - functions/node_modules
#   environment: staging
#   only:
#     - dev
#   script:
#     - yarn global add firebase-tools
#     - firebase use staging --token $FIREBASE_TOKEN && cd functions && yarn && yarn build
#     - firebase deploy -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID" --non-interactive --token $FIREBASE_TOKEN --only functions

# deploy-functions_production:
#   image: node:8-alpine
#   stage: deploy
#   cache:
#     key: ${CI_JOB_NAME}
#     paths:
#       - functions/node_modules
#   environment: production
#   only:
#     - master
#   script:
#     - yarn global add firebase-tools
#     - firebase use production --token $FIREBASE_TOKEN && cd functions && yarn && yarn build
#     - firebase deploy -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID" --non-interactive --token $FIREBASE_TOKEN --only functions

# deploy-hosting_staging:
#   image: node:12-alpine
#   stage: deploy
#   cache:
#     key: ${CI_JOB_NAME}
#     paths:
#       - node_modules
#   only:
#     - dev
#   environment: staging
#   script:
#     - yarn && yarn add firebase-tools --ignore-engines
#     - DEPLOY_ENV=staging yarn build-www-browser
#     - yarn firebase use staging --token $FIREBASE_TOKEN
#     - yarn firebase deploy -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID" --non-interactive --token $FIREBASE_TOKEN --only hosting

# deploy-hosting_production:
#   image: node:12-alpine
#   stage: deploy
#   cache:
#     key: ${CI_JOB_NAME}
#     paths:
#       - node_modules
#   only:
#     - master
#   environment: production
#   script:
#     - yarn && yarn add firebase-tools --ignore-engines
#     - DEPLOY_ENV=production yarn build-www-browser
#     - yarn firebase use production --token $FIREBASE_TOKEN
#     - yarn firebase deploy -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID" --non-interactive --token $FIREBASE_TOKEN --only hosting

deploy-ios:
  stage: build
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - node_modules/
      - src-cordova/node_modules/
      - src-cordova/platforms/
      - src-cordova/plugins/
  only:
    - tags
  script: 
    - chmod +x src-cordova/update-version.sh
    - "[[ -z $CI_COMMIT_TAG ]] || ./src-cordova/update-version.sh $CI_COMMIT_TAG"
    - yarn
    - DEPLOY_ENV=production yarn prebuild 
    - DEPLOY_ENV=production yarn build-ios 
    - yarn publish-ios
  tags:
    - ios_9-2
    - xcode_7-2
    - osx_10-11